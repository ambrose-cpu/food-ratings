class FoodRatings {
    struct Compare {
        bool operator()(const pair<int, string>& a, const pair<int, string>& b) const {
            if (a.first != b.first) return a.first > b.first;  
            return a.second < b.second;                       
        }
    };
    
    unordered_map<string, pair<string, int>> foodInfo;  // food -> {cuisine, rating}
    unordered_map<string, set<pair<int, string>, Compare>> cuisineFoods; // cuisine -> set of {rating, food}

public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        for (int i = 0; i < foods.size(); i++) {
            foodInfo[foods[i]] = {cuisines[i], ratings[i]};
            cuisineFoods[cuisines[i]].insert({ratings[i], foods[i]});
        }
    }
    
    void changeRating(string food, int newRating) {
        auto [cuisine, oldRating] = foodInfo[food];
        cuisineFoods[cuisine].erase({oldRating, food});
        cuisineFoods[cuisine].insert({newRating, food});
        foodInfo[food] = {cuisine, newRating};
    }
    
    string highestRated(string cuisine) {
        return cuisineFoods[cuisine].begin()->second;
    }
};
